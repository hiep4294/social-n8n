{
  "meta": {
    "instanceId": "12345678-1234-1234-1234-123456789012"
  },
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "social-media-post",
        "responseMode": "onReceived",
        "options": {}
      },
      "id": "f1d2e3c4-a5b6-4c7d-8e9f-123456789abc",
      "name": "Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        260,
        300
      ],
      "webhookId": "12345678-1234-1234-1234-123456789012"
    },
    {
      "parameters": {
        "jsCode": "// Xử lý dữ liệu đầu vào\nconst data = $input.first().json;\n\n// Chuẩn bị content cho 30 platforms\nconst platforms = [\n  // Original platforms\n  {\n    platform: 'facebook',\n    content: {\n      message: data.content,\n      image: data.image_url,\n      link: data.link\n    }\n  },\n  {\n    platform: 'twitter', \n    content: {\n      text: data.content.substring(0, 280),\n      media: data.image_url\n    }\n  },\n  {\n    platform: 'instagram',\n    content: {\n      caption: data.content + '\\n\\n' + (data.hashtags || ''),\n      image_url: data.image_url\n    }\n  },\n  {\n    platform: 'linkedin',\n    content: {\n      text: data.content,\n      title: data.title,\n      url: data.link\n    }\n  },\n  {\n    platform: 'telegram',\n    content: {\n      text: data.content,\n      photo: data.image_url\n    }\n  },\n  {\n    platform: 'discord',\n    content: {\n      content: data.content,\n      embeds: data.image_url ? [{ image: { url: data.image_url } }] : []\n    }\n  },\n  {\n    platform: 'pinterest',\n    content: {\n      note: data.content,\n      image_url: data.image_url,\n      link: data.link\n    }\n  },\n  {\n    platform: 'reddit',\n    content: {\n      title: data.title || 'New Post',\n      text: data.content,\n      subreddit: data.subreddit || 'test'\n    }\n  },\n  {\n    platform: 'medium',\n    content: {\n      title: data.title || 'New Article',\n      content: data.content,\n      publishStatus: 'draft'\n    }\n  },\n  {\n    platform: 'mastodon',\n    content: {\n      status: data.content,\n      media: data.image_url\n    }\n  },\n  // 20 new platforms\n  {\n    platform: 'youtube',\n    content: {\n      title: data.title || 'New Video',\n      description: data.content,\n      videoId: data.video_id,\n      tags: data.hashtags\n    }\n  },\n  {\n    platform: 'tiktok',\n    content: {\n      text: data.content.substring(0, 150),\n      video_url: data.video_url,\n      hashtags: data.hashtags\n    }\n  },\n  {\n    platform: 'snapchat',\n    content: {\n      text: data.content,\n      media_url: data.image_url || data.video_url\n    }\n  },\n  {\n    platform: 'whatsapp',\n    content: {\n      message: data.content,\n      media: data.image_url,\n      phone_numbers: data.whatsapp_numbers\n    }\n  },\n  {\n    platform: 'tumblr',\n    content: {\n      type: 'text',\n      title: data.title,\n      body: data.content,\n      tags: data.hashtags\n    }\n  },\n  {\n    platform: 'flickr',\n    content: {\n      title: data.title,\n      description: data.content,\n      photo_url: data.image_url,\n      tags: data.hashtags\n    }\n  },\n  {\n    platform: 'vimeo',\n    content: {\n      name: data.title || 'New Video',\n      description: data.content,\n      video_file: data.video_url\n    }\n  },\n  {\n    platform: 'slack',\n    content: {\n      text: data.content,\n      channel: data.slack_channel || '#general',\n      attachments: data.image_url ? [{ image_url: data.image_url }] : []\n    }\n  },\n  {\n    platform: 'teams',\n    content: {\n      text: data.content,\n      title: data.title,\n      image: data.image_url\n    }\n  },\n  {\n    platform: 'line',\n    content: {\n      type: 'text',\n      text: data.content,\n      altText: data.content.substring(0, 400)\n    }\n  },\n  {\n    platform: 'wechat',\n    content: {\n      content: data.content,\n      media: data.image_url,\n      type: 'text'\n    }\n  },\n  {\n    platform: 'vk',\n    content: {\n      message: data.content,\n      attachments: data.image_url,\n      owner_id: data.vk_owner_id\n    }\n  },\n  {\n    platform: 'ok',\n    content: {\n      text: data.content,\n      media: data.image_url,\n      group_id: data.ok_group_id\n    }\n  },\n  {\n    platform: 'viber',\n    content: {\n      text: data.content,\n      media: data.image_url,\n      broadcast_list: data.viber_broadcast_list\n    }\n  },\n  {\n    platform: 'xing',\n    content: {\n      text: data.content,\n      url: data.link\n    }\n  },\n  {\n    platform: 'clubhouse',\n    content: {\n      room_title: data.title || 'New Room',\n      topic: data.content\n    }\n  },\n  {\n    platform: 'twitch',\n    content: {\n      title: data.title || 'Live Stream',\n      category: data.twitch_category || 'Just Chatting',\n      description: data.content\n    }\n  },\n  {\n    platform: 'periscope',\n    content: {\n      broadcast_title: data.title || 'Live Broadcast',\n      description: data.content\n    }\n  },\n  {\n    platform: 'qq',\n    content: {\n      content: data.content,\n      image: data.image_url,\n      qzone_id: data.qq_zone_id\n    }\n  },\n  {\n    platform: 'weibo',\n    content: {\n      status: data.content,\n      pic: data.image_url,\n      visible: 0\n    }\n  }\n];\n\n// Thêm original data vào mỗi platform\nreturn platforms.map(p => ({\n  json: {\n    ...p.content,\n    platform: p.platform,\n    original_data: data\n  }\n}));"
      },
      "id": "a1b2c3d4-e5f6-7g8h-9i0j-123456789def",
      "name": "Process Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        480,
        300
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "12345678-1234-1234-1234-123456789012",
              "leftValue": "={{ $json.platform }}",
              "rightValue": "facebook",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "fb-filter",
      "name": "Facebook Filter", 
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        700,
        100
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://graph.facebook.com/v18.0/me/feed",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "facebookGraphApi",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"message\": \"{{ $json.message }}\",\n  \"link\": \"{{ $json.link }}\",\n  \"picture\": \"{{ $json.image }}\"\n}",
        "options": {}
      },
      "id": "facebook-post",
      "name": "Facebook Post",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        920,
        100
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "twitter-condition",
              "leftValue": "={{ $json.platform }}",
              "rightValue": "twitter",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "twitter-filter",
      "name": "Twitter Filter",
      "type": "n8n-nodes-base.if", 
      "typeVersion": 2,
      "position": [
        700,
        150
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.twitter.com/2/tweets",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "twitterOAuth2Api",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"text\": \"{{ $json.text }}\"\n}",
        "options": {}
      },
      "id": "twitter-post",
      "name": "Twitter Post",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        920,
        150
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "instagram-condition",
              "leftValue": "={{ $json.platform }}",
              "rightValue": "instagram",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "instagram-filter",
      "name": "Instagram Filter",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        700,
        200
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://graph.facebook.com/v18.0/me/media",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "instagramBasicDisplayApi",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"image_url\": \"{{ $json.image_url }}\",\n  \"caption\": \"{{ $json.caption }}\"\n}",
        "options": {}
      },
      "id": "instagram-post",
      "name": "Instagram Post",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        920,
        200
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "linkedin-condition",
              "leftValue": "={{ $json.platform }}",
              "rightValue": "linkedin",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "linkedin-filter",
      "name": "LinkedIn Filter",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        700,
        250
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.linkedin.com/v2/ugcPosts",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "linkedInOAuth2Api",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"author\": \"urn:li:person:{{ $json.original_data.linkedin_person_id }}\",\n  \"lifecycleState\": \"PUBLISHED\",\n  \"specificContent\": {\n    \"com.linkedin.ugc.ShareContent\": {\n      \"shareCommentary\": {\n        \"text\": \"{{ $json.text }}\"\n      },\n      \"shareMediaCategory\": \"NONE\"\n    }\n  },\n  \"visibility\": {\n    \"com.linkedin.ugc.MemberNetworkVisibility\": \"PUBLIC\"\n  }\n}",
        "options": {}
      },
      "id": "linkedin-post",
      "name": "LinkedIn Post",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        920,
        250
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "telegram-condition",
              "leftValue": "={{ $json.platform }}",
              "rightValue": "telegram",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "telegram-filter",
      "name": "Telegram Filter",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        700,
        300
      ]
    },
    {
      "parameters": {
        "chatId": "={{ $json.original_data.telegram_chat_id || '@your_channel' }}",
        "text": "={{ $json.text }}",
        "additionalFields": {
          "parse_mode": "HTML"
        }
      },
      "id": "telegram-post",
      "name": "Telegram Post",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        920,
        300
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "discord-condition",
              "leftValue": "={{ $json.platform }}",
              "rightValue": "discord",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "discord-filter",
      "name": "Discord Filter",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        700,
        350
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $json.original_data.discord_webhook_url }}",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"content\": \"{{ $json.content }}\",\n  \"embeds\": {{ JSON.stringify($json.embeds) }}\n}",
        "options": {}
      },
      "id": "discord-post",
      "name": "Discord Post",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        920,
        350
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "youtube-condition",
              "leftValue": "={{ $json.platform }}",
              "rightValue": "youtube",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "youtube-filter",
      "name": "YouTube Filter",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        700,
        400
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://www.googleapis.com/youtube/v3/videos",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "googleOAuth2Api",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "part",
              "value": "snippet,status"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"snippet\": {\n    \"title\": \"{{ $json.title }}\",\n    \"description\": \"{{ $json.description }}\",\n    \"tags\": {{ JSON.stringify($json.tags?.split(',') || []) }}\n  },\n  \"status\": {\n    \"privacyStatus\": \"public\"\n  }\n}",
        "options": {}
      },
      "id": "youtube-post",
      "name": "YouTube Post",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        920,
        400
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "tiktok-condition",
              "leftValue": "={{ $json.platform }}",
              "rightValue": "tiktok",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "tiktok-filter",
      "name": "TikTok Filter",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        700,
        450
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://open-api.tiktok.com/share/video/upload/",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "tiktokApi",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"video_url\": \"{{ $json.video_url }}\",\n  \"text\": \"{{ $json.text }}\",\n  \"hashtag\": \"{{ $json.hashtags }}\"\n}",
        "options": {}
      },
      "id": "tiktok-post",
      "name": "TikTok Post",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        920,
        450
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "whatsapp-condition",
              "leftValue": "={{ $json.platform }}",
              "rightValue": "whatsapp",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "whatsapp-filter",
      "name": "WhatsApp Filter",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        700,
        500
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://graph.facebook.com/v17.0/{{ $json.original_data.whatsapp_phone_number_id }}/messages",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "whatsappBusinessApi",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"messaging_product\": \"whatsapp\",\n  \"to\": \"{{ $json.phone_numbers }}\",\n  \"type\": \"text\",\n  \"text\": {\n    \"body\": \"{{ $json.message }}\"\n  }\n}",
        "options": {}
      },
      "id": "whatsapp-post",
      "name": "WhatsApp Post",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        920,
        500
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "slack-condition",
              "leftValue": "={{ $json.platform }}",
              "rightValue": "slack",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "slack-filter",
      "name": "Slack Filter",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        700,
        550
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://slack.com/api/chat.postMessage",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "slackOAuth2Api",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"channel\": \"{{ $json.channel }}\",\n  \"text\": \"{{ $json.text }}\",\n  \"attachments\": {{ JSON.stringify($json.attachments) }}\n}",
        "options": {}
      },
      "id": "slack-post",
      "name": "Slack Post",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        920,
        550
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "vk-condition",
              "leftValue": "={{ $json.platform }}",
              "rightValue": "vk",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "vk-filter",
      "name": "VK Filter",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        700,
        600
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.vk.com/method/wall.post",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"owner_id\": \"{{ $json.owner_id }}\",\n  \"message\": \"{{ $json.message }}\",\n  \"attachments\": \"{{ $json.attachments }}\",\n  \"access_token\": \"{{ $json.original_data.vk_access_token }}\",\n  \"v\": \"5.131\"\n}",
        "options": {}
      },
      "id": "vk-post",
      "name": "VK Post",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        920,
        600
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "weibo-condition",
              "leftValue": "={{ $json.platform }}",
              "rightValue": "weibo",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "weibo-filter",
      "name": "Weibo Filter",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        700,
        650
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.weibo.com/2/statuses/update.json",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "weiboOAuth2Api",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"status\": \"{{ $json.status }}\",\n  \"pic\": \"{{ $json.pic }}\",\n  \"visible\": {{ $json.visible }}\n}",
        "options": {}
      },
      "id": "weibo-post",
      "name": "Weibo Post",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        920,
        650
      ]
    },
    {
      "parameters": {
        "jsCode": "// Collect results from all platforms\nconst results = $input.all();\nconst summary = {\n  timestamp: new Date().toISOString(),\n  total_attempted: results.length,\n  successful: 0,\n  failed: 0,\n  results: []\n};\n\nresults.forEach(item => {\n  const platform = item.json.platform || 'unknown';\n  \n  if (item.json.error || !item.json.id) {\n    summary.failed++;\n    summary.results.push({\n      platform: platform,\n      status: 'failed',\n      error: item.json.error || 'No post ID returned'\n    });\n  } else {\n    summary.successful++;\n    summary.results.push({\n      platform: platform,\n      status: 'success',\n      post_id: item.json.id\n    });\n  }\n});\n\nreturn [{ json: summary }];"
      },
      "id": "results-summary",
      "name": "Results Summary",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1140,
        400
      ]
    }
  ],
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "Process Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Data": {
      "main": [
        [
          {
            "node": "Facebook Filter",
            "type": "main",
            "index": 0
          },
          {
            "node": "Twitter Filter",
            "type": "main",
            "index": 0
          },
          {
            "node": "Instagram Filter",
            "type": "main",
            "index": 0
          },
          {
            "node": "LinkedIn Filter",
            "type": "main",
            "index": 0
          },
          {
            "node": "Telegram Filter",
            "type": "main",
            "index": 0
          },
          {
            "node": "Discord Filter",
            "type": "main",
            "index": 0
          },
          {
            "node": "YouTube Filter",
            "type": "main",
            "index": 0
          },
          {
            "node": "TikTok Filter",
            "type": "main",
            "index": 0
          },
          {
            "node": "WhatsApp Filter",
            "type": "main",
            "index": 0
          },
          {
            "node": "Slack Filter",
            "type": "main",
            "index": 0
          },
          {
            "node": "VK Filter",
            "type": "main",
            "index": 0
          },
          {
            "node": "Weibo Filter",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Facebook Filter": {
      "main": [
        [
          {
            "node": "Facebook Post",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Facebook Post": {
      "main": [
        [
          {
            "node": "Results Summary",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Twitter Filter": {
      "main": [
        [
          {
            "node": "Twitter Post",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Twitter Post": {
      "main": [
        [
          {
            "node": "Results Summary",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Instagram Filter": {
      "main": [
        [
          {
            "node": "Instagram Post",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Instagram Post": {
      "main": [
        [
          {
            "node": "Results Summary",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "LinkedIn Filter": {
      "main": [
        [
          {
            "node": "LinkedIn Post",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "LinkedIn Post": {
      "main": [
        [
          {
            "node": "Results Summary",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Telegram Filter": {
      "main": [
        [
          {
            "node": "Telegram Post",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Telegram Post": {
      "main": [
        [
          {
            "node": "Results Summary",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Discord Filter": {
      "main": [
        [
          {
            "node": "Discord Post",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Discord Post": {
      "main": [
        [
          {
            "node": "Results Summary",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "YouTube Filter": {
      "main": [
        [
          {
            "node": "YouTube Post",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "YouTube Post": {
      "main": [
        [
          {
            "node": "Results Summary",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "TikTok Filter": {
      "main": [
        [
          {
            "node": "TikTok Post",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "TikTok Post": {
      "main": [
        [
          {
            "node": "Results Summary",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "WhatsApp Filter": {
      "main": [
        [
          {
            "node": "WhatsApp Post",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "WhatsApp Post": {
      "main": [
        [
          {
            "node": "Results Summary",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Slack Filter": {
      "main": [
        [
          {
            "node": "Slack Post",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Slack Post": {
      "main": [
        [
          {
            "node": "Results Summary",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "VK Filter": {
      "main": [
        [
          {
            "node": "VK Post",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "VK Post": {
      "main": [
        [
          {
            "node": "Results Summary",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Weibo Filter": {
      "main": [
        [
          {
            "node": "Weibo Post",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Weibo Post": {
      "main": [
        [
          {
            "node": "Results Summary",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 0,
  "updatedAt": "2024-01-20T10:00:00.000Z",
  "versionId": "12345678-1234-1234-1234-123456789012"
}
